pipeline {
  agent any
  
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
    timestamps()
  }

  stages {
    stage('Pull Code'){
      steps {
        withCredentials([usernamePassword(credentialsId: 'Github', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
          sh '''
            config_file="${JENKINS_HOME}/jobs/${JOB_BASE_NAME}/config.xml"
            git_repo=$(grep -oP '(?<=url>)[^<]+' $config_file)
            repo_name=$(echo ${git_repo} | awk -F"/" '{ print $NF }' | cut -d'.' -f1)
            rm -rf ${repo_name}
            git clone $git_repo
            cd ${repo_name}
            git checkout develop
            git status -s
            [ $? -ne 0 ] && exit 1
          '''
        }
      }
    }

    stage('Build Virtual Environment'){
      steps {
        sh '''
           python3 -m venv venv
           source venv/bin/activate
           pip install -r */requirement.txt
        '''
      }
    }

    stage('Unit Test'){
      steps {
        sh '''
           source venv/bin/activate
           cd */test
           pytest --disable-pytest-warnings -v --junitxml="result.xml" --cov=../src/jobs --cov-report html
        '''
      }
    }

    stage('Prepare Release'){
      steps {
        withCredentials([usernamePassword(credentialsId: 'Github', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
          sh '''
            config_file="${JENKINS_HOME}/jobs/${JOB_BASE_NAME}/config.xml"
            git_repo=$(grep -oP '(?<=url>)[^<]+' $config_file)
            repo_name=$(echo ${git_repo} | awk -F"/" '{ print $NF }' | cut -d'.' -f1)
            cd ${repo_name}
            current_version=$(grep -oP '(?<=version=").*(?=",)' src/setup.py)
            release_version=$(echo $current_version | cut -d'-' -f1)
            user_name=$(grep -oP '(?<=author=").*(?=",)' src/setup.py)
            user_email=$(grep -oP '(?<=author_email=").*(?=",)' src/setup.py)
            git config user.email "${user_email}"
            git config user.name "${user_name}"
            git checkout -b "release-v${release_version}" develop
            sed -i 's/'${current_version}'/'${release_version}'/g' src/setup.py
            git add src/setup.py
            git commit -m "Prepare for release ${release_version}"
          '''
        }
      }
    }

    stage('Build'){
      steps {
        sh '''
           source venv/bin/activate
           config_file="${JENKINS_HOME}/jobs/${JOB_BASE_NAME}/config.xml"
           git_repo=$(grep -oP '(?<=url>)[^<]+' $config_file)
           repo_name=$(echo ${git_repo} | awk -F"/" '{ print $NF }' | cut -d'.' -f1)
           cd ${repo_name}/src
           python setup.py sdist bdist_wheel
           python -m twine upload -r local --skip-existing dist/*.whl
        '''
      }
    }

    stage('Release'){
      steps {
        withCredentials([usernamePassword(credentialsId: 'Github', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
          sh '''
             git_user=$GIT_USERNAME
             git_passwd=$GIT_PASSWORD
             config_file="${JENKINS_HOME}/jobs/${JOB_BASE_NAME}/config.xml"
             git_repo=$(grep -oP '(?<=url>)[^<]+' $config_file)
             repo_name=$(echo ${git_repo} | awk -F"/" '{ print $NF }' | cut -d'.' -f1)
             repo_prefix=$(echo ${repo_name} | awk -F'://' '{ print $1 }')
             repo_sufix=$(echo ${repo_name} | awk -F'://' '{ print $2 }')
             repo_url_auth="${repo_prefix}://${git_user}:${git_passwd}@${repo_sufix}"
             cd ${repo_name}
             release_version=$(grep -oP '(?<=version=").*(?=",)' src/setup.py)
             updated_version=$(echo "${release_version} | awk -F'.' '{ print $1"."($2 + 1)"."$3 }')
             user_name=$(grep -oP '(?<=author=").*(?=",)' src/setup.py)
             user_email=$(grep -oP '(?<=author_email=").*(?=",)' src/setup.py)
             git config user.email "${user_email}"
             git config user.name "${user_name}"
             git checkout master
             git merge --no-ff --no-edit "release-v${release_version}"
             git tag -a ${release_version} -m "Tagging release ${release_version}"
             git push "${repo_url_auth}" origin ${release_version}
             git push "${repo_url_auth}" origin master
             git checkout develop
             git merge --no-ff --no-edit "release-v${release_version}"
             git push "${repo_url_auth}" origin develop
             git branch -d "release-v${release_version}"
             sed -i 's/'${release_version}'/'${updated_version}'-SNAPSHOT/g' src/setup.py
             git add src/setup.py
             git commit -m "Setup new development cycle."
             git push "${repo_url_auth}" origin develop             
          '''
        }
      }
    }

  }

  post {
    success {
      echo "- Success build. Uploading."
      junit 'test/*.xml'
      publishHTML (target: [
        allowMissing: false,
        alwaysLinkToLastBuild: false,
        keepAll: true,
        reportDir: 'test/htmlcov',
        reportFiles: 'index.html',
        reportName: "Coverage"
      ])
      /*
      mail bcc: '', body: '''<p>RELEASE SUCCESS: Job \'${env.JOB_NAME} [${env.BUILD_NUMBER}]\':</p>
<p>Check console output at &QUOT;<a href=\'${env.BUILD_URL}\'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>''', cc: '', from: '', replyTo: '', subject: '[RELEASE] SUCCESS: Job \'${env.JOB_NAME} [${env.BUILD_NUMBER}]\'', to: 'emailid@mail.com'
      */
    }

    failure {
      echo "- Failed build."
      /*
      mail bcc: '', body: '''<p>RELEASE FAILED: Job \'${env.JOB_NAME} [${env.BUILD_NUMBER}]\':</p>
<p>Check console output at &QUOT;<a href=\'${env.BUILD_URL}\'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a>&QUOT;</p>''', cc: '', from: '', replyTo: '', subject: '[RELEASE] FAILED: Job \'${env.JOB_NAME} [${env.BUILD_NUMBER}]\'', to: 'emailid@mail.com'
      */
    }

    cleanup {
      echo "- Cleanup action."
    }

  }

}
